---
import BaseLayout from "../layouts/BaseLayout.astro";
import cv from '../data/cv.json';
import '../styles/cv.css'

const pageTitle = "Josh Olivier — CV";
const { basics, education, publications, presentations, researchExperience, grants, awards, affiliations, skills } = cv;

function formatDate(str) {
  if (!str) return '';
  const d = new Date(str);
  return `${d.toLocaleString('default', { month: 'short' })} ${d.getFullYear()}`;
}

function formatDateFull(str) {
  if (!str) return '';
  const d = new Date(str);
  return d.toLocaleDateString('default', { year: 'numeric', month: 'long', day: 'numeric' });
}
---
<script>
  document.getElementById('print-button').addEventListener('click', function() {
    window.print(); 
  });
</script>

<BaseLayout pageTitle={pageTitle} shouldCenterTitle={false} shouldShowTitle={false}>
<main>
 <div class="cv-container">
  <button id="print-button" class="btn print-button">Print</button>
      <h1>{basics.name}</h1>
      <div class="print-header">
        <h2>Personal Information</h2>
        <hr />
      </div>
      {basics.location.address && ( /* show address only if listed in cv.json */
        <div>
          {basics.location.address} <br />
          {basics.location.city}, {basics.location.postalCode}
        </div>
      )}
      <div>{basics.phone}</div>
      <div> <!-- email address link obfuscated using https://www.albionresearch.com/tools/obfuscator -->
        Email: <a href="&#109;ailt&#111;&#58;&#106;osh%75%61m&#37;&#54;&#70;li%&#55;6%6&#57;&#101;r%4&#48;g%6&#68;&#37;6&#49;il&#46;c&#111;%6D" 
        target="_blank">j&#111;shuamolivi&#101;r&#64;gmail&#46;&#99;om</a>
        <span> <!-- email address link obfuscated using https://www.albionresearch.com/tools/obfuscator -->
        | <a href='mail&#116;&#111;&#58;j&#111;%7&#51;hua%2Eo&#37;&#54;Civier&#64;u&#116;&#100;all&#97;&#115;&#46;%65du'
        target="_blank">j&#111;s&#104;ua&#46;oli&#118;ie&#114;&#64;u&#116;da&#108;las&#46;edu</span></a>
      </span>
      </div>
      
      <div>
        Website: <a href={basics.url} target="_blank">{basics.url}</a>
      </div>
      <section>
        <div class="print-header">
        <h2>Education</h2>
        <hr />
        </div>
        {education.map(ed => (
          <div key={ed.institution} class="section-item item-entry">
            <div class="item-header">
              <div>{ed.studyType}, {ed.area}, {ed.institution} ({ed.score && <span>GPA: {ed.score}</span>}) {/* show GPA only if listed in cv.json */}
              </div>
              <span class="date-range">{formatDate(ed.startDate)} – {formatDate(ed.endDate)}</span>
            </div>
            <div class="indent-item-simple">
            
            {ed.advisor && <div>Advisor: {ed.advisor}</div>} {/* show advisor only if listed in cv.json */}
            
            {ed.courses && ed.courses.length > 0 && ( /* show coursework only if listed in cv.json */
                <div class="indent-item"><i>Relevant coursework:</i></div> 
                <ul class="two-column-list">
                  {ed.courses.map((course, index) => (
                    <li key={index}>{course}</li>
                  ))}
                </ul>
            )}
            </div>
          </div>
        ))}
      </section>

      <section>
        <div class="print-header">
        <h2>Publications</h2>
        <hr />
        </div>
        <div>
          {publications.map(pub => (
            <div class="reference-entry print-section">
              <Fragment set:html={`${pub.authors.replace(/Olivier, J. M\./g, '<span class="my-name";>Olivier, J. M.</span>')}`} />
              ({pub.year}). {pub.name}. <em>{pub.publisher}</em>. 
              <a href={pub.url} target="_blank">{pub.url}</a>
            </div>
          ))}
        </div>
        <div class="footnote">*These authors have contributed equally to this work and share first authorship</div>
        <div class="footnote">**These authors jointly supervised this work and share senior authorship</div>
      </section>

      <section>
        <div class="print-header">
        <h2>Presentations</h2>
          <hr/>
          </div>
        <div>
          {presentations.map(pres => (
            <div class="reference-entry print-section">
              <Fragment set:html={`${pres.authors.replace(/Olivier, J. M\./g, '<span class="my-name";>Olivier, J. M.</span>')}`} />
              ({pres.year}, {pres.dateRange}). <i>{pres.name}</i> [{pres.type}].
              {pres.conference}, {pres.location}. <a href={pres.url} target="_blank">{pres.url}</a>
            </div>
          ))}
        </div>
        <div class="footnote">*Presenter</div>
      </section>

     <section>
      <div class="print-header">
        <h2>Research Experience</h2>
        <hr />
        </div>
        {researchExperience.map(res => (
          <div class="section-item item-entry print-section">
            <div class="item-header">
              <div><strong>{res.lab}</strong></div>
              <span class="date-range">
                {res.startDate
                  ? `${formatDate(res.startDate)} – ${res.endDate ? formatDate(res.endDate) : 'Present'}` 
                  : ''} {/* if startDate contains a date and endDate is blank, show Present as the endDate */}
              </span>
            </div>
            <div>
            <div>{res.institution}</div>
            <div>Mentor: {res.mentor}</div>
            <div>Title: {res.title}</div>
            </div>
            {res.duties && res.duties.length > 0 && ( /* show duties only if listed in cv.json */
                <ul>
                  {res.duties.map((duty, index) => (
                    <li key={index}>{duty}</li>
                  ))}
                </ul>
            )}
          </div>
        ))}
      </section>

      <section>
        <div class="print-header">
        <h2>Grants &amp; Fellowships</h2>
        <hr />
        </div>
        {grants.map(g => (
          <div class="section-item item-entry print-section">
            <div class="item-header">
              <div><strong>{g.title}</strong></div>
              <span>{formatDate(g.date)}</span>
            </div>
            <div>
            {g.awarder}
            <div>{g.summary}</div>
            <div>Award: {g.award}</div>
            </div>
          </div>
        ))}
      </section>

      <section>
        <div class="print-header">
        <h2>Honors, Awards &amp; Certificates</h2>
        <hr />
        </div>
        {awards.map(a => (
          <div class="section-item item-entry print-section">
            <div class="item-header">
              <div><strong>{a.title}</strong></div>
              <span>{formatDate(a.date)}</span>
            </div>
            <div>{a.awarder}
            <div>{a.summary}</div>
            </div>
          </div>
        ))}
      </section>

      <section>
        <div class="print-header">
        <h2>Professional Affiliations</h2>
        <hr />
        </div>
        {affiliations.map(aff => (
          aff.organization.map(org => (
            <div>{org}</div>
          ))
        ))}
      </section> 

   <section>
    <div class="print-header">
  <h2>Skills</h2>
  <hr />
  </div>
  {skills.map(skillCategory => {
    let introText = "";

    switch (skillCategory.category) {
      case "Software":
        introText = "Proficiency with the following software:";
        break;
      case "Programming":
        introText = "Experience with the following languages:";
        break;
      case "Web Development":
        introText = "Web development experience with:";
        break;
      case "Neuropsychological Tests":
        introText = "Experience administering and scoring neuropsychological tests with healthy and clinical adult participants (ages 18-85+) in a research setting, including:";
        break;
      case "Languages":
        introText = "Languages spoken:";
        break;
      default:
        introText = "";
    }

  const listClass = skillCategory.category === "Programming"
    ? "single-column-list" /* make Programming Languages a single-column list--an exception to the rule */ 
    : "three-column-list";

  return (
    <div class="skill-category print-section">
      <div><strong>{skillCategory.category}</strong></div>
      <div>{introText}</div>
      <ul class={listClass}>
        {skillCategory.items.map(item => (
          <li key={item}>{item}</li>
        ))}
      </ul>
    </div>
  );
})}
</section>

    </div>
  </body>
</html>
</main>
</BaseLayout>