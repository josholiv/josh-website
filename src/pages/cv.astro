---
import BaseLayout from "../layouts/BaseLayout.astro";
import cv from '../data/cv.json';
import '../styles/cv.css'

const pageTitle = "";
const { basics, education, publications, presentations, researchExperience, grants, awards, affiliations, skills } = cv;

function formatDate(str) {
  if (!str) return '';
  const d = new Date(str);
  return `${d.toLocaleString('default', { month: 'short' })} ${d.getFullYear()}`;
}

function formatDateFull(str) {
  if (!str) return '';
  const d = new Date(str);
  return d.toLocaleDateString('default', { year: 'numeric', month: 'long', day: 'numeric' });
}
---
<BaseLayout pageTitle={pageTitle} shouldCenterTitle={true}>
<main class="cv-page">
 <div class="cv-container">
      <h1>{basics.name}</h1>
      <h2>Personal Information</h2>
      <hr />
      {basics.location.address && ( /* show address only if listed in cv.json */
        <div class="section-item">
          {basics.location.address} <br />
          {basics.location.city}, {basics.location.postalCode}
        </div>
      )}
      <div>{basics.phone}</div>
      <div>Email: {basics.email}</div>
      <div>{basics.altEmail}</div>
      <div>Website: <a href={basics.url} target="_blank">{basics.url}</a></div>

      <section>
        <h2>Education</h2>
        <hr />
        {education.map(ed => (
          <div key={ed.institution} class="section-item item-entry">
            <div class="item-header">
              <div><strong>{ed.studyType}, {ed.area},</strong> {ed.institution}</div>
              <span class="date-range">{formatDate(ed.startDate)} – {formatDate(ed.endDate)}</span>
            </div>
            {ed.advisor && <div>Advisor: {ed.advisor}</div>} {/* show advisor only if listed in cv.json */}
            {ed.courses && ed.courses.length > 0 && ( /* show coursework only if listed in cv.json */
                <div class="indent-item"><i>Relevant coursework:</i></div> 
                <ul class="two-column-list">
                  {ed.courses.map((course, index) => (
                    <li key={index}>{course}</li>
                  ))}
                </ul>
            )}
          </div>
        ))}
      </section>

      <section>
        <h2>Publications</h2>
        <hr />
        <div>
          {publications.map(pub => (
            <div class="reference-entry">
              <Fragment set:html={`${pub.authors.replace(/Olivier, J. M\./g, "<strong>Olivier, J. M.</strong>")}`} />
              &nbsp;({pub.year}). {pub.name}. <em>{pub.publisher}</em>. 
              <a href={pub.url} target="_blank">{pub.url}</a>
            </div>
          ))}
        </div>
        <div>*These authors have contributed equally to this work and share first authorship</div>
        <div>**These authors jointly supervised this work and share senior authorship</div>
      </section>

      <section>
        <h2>Presentations</h2>
        <hr />
        <div>
          {presentations.map(pres => (
            <div class="reference-entry">
              <Fragment set:html={`
                ${pres.authors.replace(/Olivier, J. M\./g, "<strong>Olivier, J. M.</strong>")} 
                (${pres.year}, ${pres.dateRange}). 
                <i>${pres.name}</i> [${pres.type}]. 
                ${pres.conference}, ${pres.location}. 
                <a href="${pres.url}" target="_blank">${pres.url}</a>
              `} />
            </div>
          ))}
        </div>
        <div>
          *Presenter
        </div>
      </section>

     <section>
        <h2>Research Experience</h2>
        <hr />
        {researchExperience.map(res => (
          <div class="section-item item-entry">
            <div class="item-header">
              <div><strong>{res.lab}</strong>, {res.institution}</div>
              <span class="date-range">
                {res.startDate
                  ? `${formatDate(res.startDate)} – ${res.endDate ? formatDate(res.endDate) : 'Present'}` 
                  : ''} {/* if startDate contains a date and endDate is blank, show Present as the endDate */}
              </span>
            </div>
            <div>Mentor: {res.mentor}</div>
            <div>Title: {res.title}</div>
            
            {res.duties && res.duties.length > 0 && ( /* show duties only if listed in cv.json */
                <div class="indent-item"><i>Duties:</i></div> 
                <ul class="two-column-list">
                  {res.duties.map((duty, index) => (
                    <li key={index}>{duty}</li>
                  ))}
                </ul>
            )}
          </div>
        ))}
      </section>

      <section>
        <h2>Grants &amp; Fellowships</h2>
        <hr />
        {grants.map(g => (
          <div class="section-item item-entry">
            <div class="item-header">
              <div><strong>{g.title}</strong>, {g.awarder}</div>
              <span>{formatDate(g.date)}</span>
            </div>
            <div>{g.summary}</div>
            <div>Award: {g.award}</div>
          </div>
        ))}
      </section>

      <section>
        <h2>Honors, Awards &amp; Certificates</h2>
        <hr />
        {awards.map(a => (
          <div class="section-item item-entry">
            <div class="item-header">
              <div><strong>{a.title}</strong>, {a.awarder}</div>
              <span>{formatDate(a.date)}</span>
            </div>
            <div>{a.summary}</div>
          </div>
        ))}
      </section>

      <section>
        <h2>Professional Affiliations</h2>
        <hr />
        {affiliations.map(aff => (
          aff.organization.map(org => (
            <div>{org}</div>
          ))
        ))}
      </section>

   <section>
  <h2>Skills</h2>
  <hr />
  {skills.map(skillCategory => {
    let introText = "";

    switch (skillCategory.category) {
      case "Software":
        introText = "Extensive experience with the following software:";
        break;
      case "Programming Languages":
        introText = "Programming experience with the following languages:";
        break;
      case "Web Development":
        introText = "Web development experience with:";
        break;
      case "Neuropsychological Tests":
        introText = "Experience administering the following neuropsychological tests:";
        break;
      case "Languages":
        introText = "Languages spoken:";
        break;
      default:
        introText = "";
    }

    return (
      <div class="skill-category">
        <p>{introText}</p>
        <ul class="two-column-list">
          {skillCategory.items.map(item => (
            <li key={item}>{item}</li>
          ))}
        </ul>
      </div>
    );
  })}
</section>

    </div>
  </body>
</html>
</main>
</BaseLayout>