---
import BaseLayout from '../layouts/BaseLayout.astro';
import { Image } from 'astro:assets';
import aboutMePhoto from '../assets/josh-headshot-cropped.jpg';
import ChessStats from '../components/chesscom.tsx';
import Strava from "../components/strava.js";
import TriathlonStats from '../components/TriathlonStats.jsx';
import Hardcover from '../components/Hardcover.js';
import HardcoverStats from '../components/HardcoverStats.jsx';
import ErrorRenderer from "../Error.astro";

const pageTitle = "Josh Olivier — About";

// Fetch Strava data
let data, error
try {
  const strava = new Strava()
  data = await strava.fetch()
} catch (e) {
  error = e.message
}

// Fetch Hardcover data
let hardcoverGoals = [];
let topGenresAllTime = [];
let booksThisYear = [];
let hardcoverError;

try {
  const hc = new Hardcover();
  const result = await hc.fetch(); // fetch goals, topGenres, and userBooks

  hardcoverGoals = result.goals;
  topGenresAllTime = result.topGenres; // top 5 genres of all time

  const allBooks = result.userBooks || [];
  
  // Books read in the current year
  const currentYear = new Date().getFullYear();
  booksThisYear = allBooks
    .filter(entry => entry.reviewed_at && new Date(entry.reviewed_at).getFullYear() === currentYear)
    .map(entry => ({
      title: entry.book?.title || "Untitled",
      rating: entry.rating ?? null
    }));

} catch (e) {
  hardcoverGoals = [];
  topGenresAllTime = [];
  booksThisYear = [];
  hardcoverError = e.message;
}
---

<BaseLayout pageTitle={pageTitle} shouldCenterTitle={false} shouldShowTitle={false}>
  <Image src={aboutMePhoto} alt="Josh Olivier" class="about-pic" />
  <h1>About me</h1>
    <p>
      My name is Josh Olivier, and I'm a lab manager in a neuroimaging research lab in Dallas, Texas.
    </p>

    <p>
      I'm interested in researching how memory, brain structure, and brain function
      are related and how these relationships change with increasing age across the lifespan.
    </p>
    
    <p>
      In my free time, I love traveling, trying new foods, 
      and learning new skills. I learned Portuguese
      after spending some time living in Manaus, Brazil. There, I enjoyed eating lots of 
      açaí, tacacá, and grilled tambaqui. I visit Brazil often and try to explore a new region of 
      the country at least once each year.
      In addition to Portuguese, I'm currently working on learning Spanish.
    </p>

    <p>
      Some of my other hobbies include fiddling with my 3D printer, drinking tereré (cold yerba mate), and training for triathlons. 
      So far, in <strong>{new Date().getFullYear()}</strong>, I’ve logged the following distances{" "}
        <span style={{fontWeight: 'bold', color: "var(--blue-400)"}}>swimming</span>,{" "}
        <span style={{fontWeight: 'bold', color: "var(--green-400)"}}>biking</span>, and{" "}
        <span style={{fontWeight: 'bold', color: "var(--orange-400)"}}>running</span>, according to my data from Strava:
    </p>

	<TriathlonStats client:load data={data} error={error} />
	    <ErrorRenderer error={error} />
  
      <p>
        In my free time, I also love playing online chess, especially speed chess, where time controls are set so each player is allotted a limited amount of time to play their moves.
        Here are my current ratings on chess.com for three categories of speed chess: 
        <span style={{fontWeight: 'bold', color: "var(--red-400)"}}>bullet</span>,{" "} 
        with time controls of less than 3 minutes per player, 
        <span style={{fontWeight: 'bold', color: "var(--pink-400)"}}>blitz</span>,{" "} 
        with time controls of less than 10 minutes per player, and 
        <span style={{fontWeight: 'bold', color: "var(--purple-400)"}}>rapid</span>,{" "}
        with time controls of more than 10 minutes per player:
      </p>
	<ChessStats client:load /> 

    <p>
      I also enjoy reading. According to my data from Hardcover, my top genres are{" "}
      {topGenresAllTime.length > 0
        ? topGenresAllTime
            .map(g => g.genre)
            .reduce((acc, genre, i, arr) => 
              i === 0 
                ? <strong>{genre}</strong> 
                : i === arr.length - 1 
                  ? <>{acc} and <strong>{genre}</strong></> 
                  : <>{acc}, <strong>{genre}</strong></>
            , "")
        : "not available yet"}
      . Here is the total number of books I've read in <strong>{new Date().getFullYear()}</strong>, as well as my reading goal for the year:
    </p>

  <HardcoverStats client:only data={hardcoverGoals} />
  <ErrorRenderer error={hardcoverError} />
  
</BaseLayout>